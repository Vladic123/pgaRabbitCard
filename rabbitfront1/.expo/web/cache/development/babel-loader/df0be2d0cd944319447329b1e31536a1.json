{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/thinktanker/Downloads/pgaRabbitCard-master/rabbitfront1/Modules/RabbitCardSummary.js\";\n\nimport React, { Component, useEffect } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { useIsFocused } from '@react-navigation/native';\nimport { connect, useDispatch, useSelector } from 'react-redux';\nimport { getRabbitCardChoice, getTournamentById } from \"../store/redux/tournaments/actions\";\nimport { BackButton, Button, LoadingContainer, Menu, Player, SeparateButton } from \"../components/Button\";\nimport { UnderlineIcon } from \"../components/icons\";\nimport { w, h } from \"../utils/scale\";\nimport { CommonColors, CommonStyles } from \"./style\";\n\nvar _ = require('lodash');\n\nvar Summary = function Summary(_ref) {\n  var _state$selectedTourna, _state$selectedTourna2, _state$selectedTourna3;\n\n  var navigation = _ref.navigation,\n      route = _ref.route;\n  var isFocused = useIsFocused();\n  var card = route.params.card;\n  var dispatch = useDispatch();\n  var state = useSelector(function (state) {\n    return state.tournaments;\n  });\n  useEffect(function () {\n    isFocused && fetch();\n  }, [card]);\n\n  var fetch = function fetch() {\n    dispatch(getTournamentById(card.t_id));\n    dispatch(getRabbitCardChoice(card));\n  };\n\n  var holes = _.groupBy(state.choice, 'hole');\n\n  Object.keys(holes).forEach(function (key) {\n    return holes[key] = _.groupBy(holes[key], 'group_id');\n  });\n  return React.createElement(View, {\n    style: CommonStyles.overflowContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }\n  }, React.createElement(BackButton, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  }), state.tournaments.loading && React.createElement(LoadingContainer, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 37\n    }\n  }), React.createElement(SafeAreaView, {\n    style: CommonStyles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  }, React.createElement(ScrollView, {\n    style: CommonStyles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    style: [CommonStyles.padding, {\n      paddingTop: w(100)\n    }],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 11\n    }\n  }, React.createElement(Text, {\n    style: CommonStyles.title,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }\n  }, \"Rabbit Card Summary\"), React.createElement(View, {\n    style: styles.padding20,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }\n  }, React.createElement(UnderlineIcon, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 15\n    }\n  })), React.createElement(View, {\n    style: styles.topSection,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }\n  }, React.createElement(Text, {\n    style: CommonStyles.subTitle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 15\n    }\n  }, ((_state$selectedTourna = state.selectedTournament) == null ? void 0 : _state$selectedTourna.name) || ''), React.createElement(Text, {\n    style: CommonStyles.sectionTitle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 15\n    }\n  }, new Date((_state$selectedTourna2 = state.selectedTournament) == null ? void 0 : _state$selectedTourna2.start_date).toDateString() || \"\", \" - \", new Date((_state$selectedTourna3 = state.selectedTournament) == null ? void 0 : _state$selectedTourna3.end_date).toDateString() || \"\"), React.createElement(Text, {\n    style: [CommonStyles.sectionTitle, {\n      paddingTop: w(40)\n    }],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 15\n    }\n  }, \"RABBIT CARDS BY HOLE\"))), state.choice.map(function (hole, index) {\n    var groups = _.groupBy(hole.players, 'group_id');\n\n    return React.createElement(View, {\n      style: styles.section,\n      key: index,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 21\n      }\n    }, React.createElement(View, {\n      style: styles.paddingH40,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 15\n      }\n    }, React.createElement(View, {\n      style: [styles.row, {\n        alignItems: 'flex-end'\n      }],\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }\n    }, React.createElement(Text, {\n      style: CommonStyles.subTitle,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 19\n      }\n    }, \"HOLE \", hole.id), React.createElement(Text, {\n      style: [CommonStyles.sectionTitle, {\n        paddingLeft: 4\n      }],\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 19\n      }\n    }, \"Par \", (hole == null ? void 0 : hole.par) || \"\", \", \", (hole == null ? void 0 : hole.yardage) || \"\", \" Yards\")), React.createElement(View, {\n      style: styles.row,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }\n    }, Object.keys(groups).map(function (groupId) {\n      return React.createElement(View, {\n        style: styles.rowSection,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 23\n        }\n      }, groups[groupId].map(function (item, index) {\n        console.log(item, index);\n        return React.createElement(Player, {\n          key: index,\n          status: item.won ? 1 : 3,\n          name: item.first_name + \" \" + item.last_name,\n          onPress: function onPress() {\n            return navigation.navigate('PlayerProfile', {\n              profile: item\n            });\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 36\n          }\n        });\n      }));\n    }))));\n  }))), React.createElement(SeparateButton, {\n    prevTitle: \"RABBIT CARDS\",\n    nextTitle: \"TOURNAMENT RANKING\",\n    prev: function prev() {\n      return navigation.navigate(\"MyRabbitCards\");\n    },\n    next: function next() {\n      return navigation.navigate('YouWin', {\n        card: card\n      });\n    },\n    backgroundColor: CommonColors.Green,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }\n  }));\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    loading: state.tournaments.loading,\n    error: state.tournaments.error\n  };\n};\n\nexport default connect(mapStateToProps, {\n  getRabbitCardChoice: getRabbitCardChoice\n})(Summary);\nvar styles = StyleSheet.create({\n  padding20: {\n    paddingVertical: w(20)\n  },\n  paddingH40: {\n    paddingHorizontal: w(40),\n    paddingVertical: w(10)\n  },\n  topSection: {\n    paddingTop: w(20)\n  },\n  section: {\n    borderTopWidth: 1,\n    borderBottomWidth: 1,\n    marginBottom: -1,\n    borderColor: CommonColors.Black\n  },\n  row: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingVertical: 4\n  },\n  rowSection: {\n    flex: 1,\n    alignItems: 'flex-start'\n  }\n});","map":{"version":3,"sources":["/Users/thinktanker/Downloads/pgaRabbitCard-master/rabbitfront1/Modules/RabbitCardSummary.js"],"names":["React","Component","useEffect","useIsFocused","connect","useDispatch","useSelector","getRabbitCardChoice","getTournamentById","BackButton","Button","LoadingContainer","Menu","Player","SeparateButton","UnderlineIcon","w","h","CommonColors","CommonStyles","_","require","Summary","navigation","route","isFocused","card","params","dispatch","state","tournaments","fetch","t_id","holes","groupBy","choice","Object","keys","forEach","key","overflowContainer","loading","container","padding","paddingTop","title","styles","padding20","topSection","subTitle","selectedTournament","name","sectionTitle","Date","start_date","toDateString","end_date","map","hole","index","groups","players","section","paddingH40","row","alignItems","id","paddingLeft","par","yardage","groupId","rowSection","item","console","log","won","first_name","last_name","navigate","profile","Green","mapStateToProps","error","StyleSheet","create","paddingVertical","paddingHorizontal","borderTopWidth","borderBottomWidth","marginBottom","borderColor","Black","flexDirection","flex"],"mappings":"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","sourcesContent":["import React, { Component, useEffect } from 'react';\nimport { StyleSheet, Text, View, SafeAreaView, ScrollView } from 'react-native';\nimport { useIsFocused } from '@react-navigation/native';\nimport { connect, useDispatch, useSelector } from 'react-redux';\nimport { getRabbitCardChoice, getTournamentById } from '../store/redux/tournaments/actions';\nimport { BackButton, Button, LoadingContainer, Menu, Player, SeparateButton } from '../components/Button';\nimport { UnderlineIcon } from '../components/icons';\nimport { w, h } from '../utils/scale';\nimport { CommonColors, CommonStyles } from './style';\n\nvar _ = require('lodash');\n\nconst Summary = ({ navigation, route }) => {\n  const isFocused = useIsFocused()\n  const { card } = route.params\n\n  const dispatch = useDispatch()\n  const state = useSelector(state => state.tournaments)\n\n\n  useEffect(() => {\n    isFocused && fetch()\n  }, [card])\n\n  const fetch = () => {\n    dispatch(getTournamentById(card.t_id))\n    dispatch(getRabbitCardChoice(card))\n  }\n\n  let holes = _.groupBy(state.choice, 'hole')\n  Object.keys(holes).forEach(key => holes[key] = _.groupBy(holes[key], 'group_id'))\n\n  return (\n    <View style={CommonStyles.overflowContainer}>\n      <BackButton />\n      {state.tournaments.loading && <LoadingContainer />}\n      <SafeAreaView style={CommonStyles.container}>\n        <ScrollView style={CommonStyles.container}>\n          <View style={[CommonStyles.padding, { paddingTop: w(100) }]}>\n            <Text style={CommonStyles.title}>Rabbit Card Summary</Text>\n            <View style={styles.padding20}>\n              <UnderlineIcon />\n            </View>\n            <View style={styles.topSection}>\n              <Text style={CommonStyles.subTitle}>{state.selectedTournament?.name || ''}</Text>\n              <Text style={CommonStyles.sectionTitle}>{new Date(state.selectedTournament?.start_date).toDateString() || \"\"} - {new Date(state.selectedTournament?.end_date).toDateString() || \"\"}</Text>\n              <Text style={[CommonStyles.sectionTitle, { paddingTop: w(40) }]}>RABBIT CARDS BY HOLE</Text>\n            </View>\n          </View>\n          {state.choice.map((hole, index) => {\n            const groups = _.groupBy(hole.players, 'group_id')\n            return (<View style={styles.section} key={index}>\n              <View style={styles.paddingH40}>\n                <View style={[styles.row, { alignItems: 'flex-end' }]}>\n                  <Text style={CommonStyles.subTitle}>HOLE {hole.id}</Text>\n                  <Text style={[CommonStyles.sectionTitle, { paddingLeft: 4 }]}>Par {hole?.par || \"\"}, {hole?.yardage || \"\"} Yards</Text>\n                </View>\n                <View style={styles.row}>\n                  {\n                    Object.keys(groups).map(groupId =>\n                      <View style={styles.rowSection}>\n                        {\n                          groups[groupId].map((item, index) => {\n                            console.log(item, index)\n                            return <Player\n                              key={index}\n                              status={item.won ? 1 : 3}\n                              name={item.first_name + \" \" + item.last_name}\n                              onPress={() => navigation.navigate('PlayerProfile', { profile: item })}\n                            />\n                          }\n                          )\n                        }\n                      </View>\n                    )\n                  }\n                </View>\n              </View>\n            </View>)\n          })}\n        </ScrollView>\n      </SafeAreaView>\n      <SeparateButton prevTitle=\"RABBIT CARDS\" nextTitle=\"TOURNAMENT RANKING\" prev={() => navigation.navigate(\"MyRabbitCards\")} next={() => navigation.navigate('YouWin', { card })} backgroundColor={CommonColors.Green} />\n    </View>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  loading: state.tournaments.loading,\n  error: state.tournaments.error,\n});\n\nexport default connect(mapStateToProps, { getRabbitCardChoice })(Summary);\n\nconst styles = StyleSheet.create({\n  padding20: {\n    paddingVertical: w(20),\n  },\n  paddingH40: {\n    paddingHorizontal: w(40),\n    paddingVertical: w(10)\n  },\n  topSection: {\n    paddingTop: w(20)\n  },\n  section: {\n    borderTopWidth: 1,\n    borderBottomWidth: 1,\n    marginBottom: -1,\n    borderColor: CommonColors.Black,\n  },\n  row: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingVertical: 4,\n  },\n  rowSection: {\n    flex: 1,\n    alignItems: 'flex-start',\n  }\n});"]},"metadata":{},"sourceType":"module"}