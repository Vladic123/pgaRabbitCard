{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/thinktanker/Downloads/pgaRabbitCard-master/rabbitfront1/Modules/TournamentPushNotification.js\";\n\nimport React, { Component, useEffect } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { BackButton, Button, ButtonBack, LoadingContainer, Menu, Player, SeparateButton } from \"../components/Button\";\nimport LottieView from 'lottie-react-native';\nimport { useIsFocused } from '@react-navigation/native';\nimport { connect, useDispatch, useSelector } from 'react-redux';\nimport { getRabbitCardChoice, getTournamentById } from \"../store/redux/tournaments/actions\";\nimport { UnderlineIcon } from \"../components/icons\";\nimport { CommonColors, CommonStyles } from \"./style\";\nimport { w, h } from \"../utils/scale\";\n\nvar TournamentPushNotification = function TournamentPushNotification(_ref) {\n  var _state$selectedTourna, _state$selectedTourna2, _card$tournament;\n\n  var navigation = _ref.navigation,\n      route = _ref.route;\n  var isFocused = useIsFocused();\n  var card = route.params.card;\n  var animation = React.createRef();\n  useEffect(function () {\n    animation.current.play();\n  }, []);\n  var dispatch = useDispatch();\n  var state = useSelector(function (state) {\n    return state.tournaments;\n  });\n  useEffect(function () {\n    isFocused && fetch();\n  }, [card]);\n\n  var fetch = function fetch() {\n    dispatch(getTournamentById(card.t_id));\n  };\n\n  return React.createElement(View, {\n    style: CommonStyles.overflowContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 5\n    }\n  }, React.createElement(BackButton, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }\n  }), state.tournaments.loading && React.createElement(LoadingContainer, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 37\n    }\n  }), React.createElement(SafeAreaView, {\n    style: CommonStyles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }, React.createElement(ScrollView, {\n    style: CommonStyles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    style: [CommonStyles.padding, {\n      paddingTop: w(100)\n    }],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 11\n    }\n  }, React.createElement(Text, {\n    style: CommonStyles.title,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }\n  }, \"Tournament Information\"), React.createElement(View, {\n    style: styles.padding20,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }\n  }, React.createElement(UnderlineIcon, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 15\n    }\n  })), React.createElement(View, {\n    style: styles.topSection,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }\n  }, React.createElement(Text, {\n    style: CommonStyles.subTitle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 15\n    }\n  }, (card == null ? void 0 : card.name) || ''), React.createElement(Text, {\n    style: CommonStyles.sectionTitle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 15\n    }\n  }, new Date((_state$selectedTourna = state.selectedTournament) == null ? void 0 : _state$selectedTourna.start_date).toDateString() || \"\", \" - \", new Date((_state$selectedTourna2 = state.selectedTournament) == null ? void 0 : _state$selectedTourna2.end_date).toDateString() || \"\"), React.createElement(Text, {\n    style: CommonStyles.sectionTitle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 15\n    }\n  }, \"Round \", (card == null ? void 0 : card.round) || ''))), React.createElement(View, {\n    style: {\n      paddingHorizontal: w(40)\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 11\n    }\n  }, React.createElement(Text, {\n    style: CommonStyles.sectionTitle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  }, \"Courses\"), ((_card$tournament = card.tournament) == null ? void 0 : _card$tournament.courses) && card.tournament.courses.length !== 0 && card.tournament.courses.map(function (course) {\n    return React.createElement(View, {\n      key: course.course_number,\n      style: {\n        paddingTop: w(10)\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 22\n      }\n    }, React.createElement(Text, {\n      style: CommonStyles.smallText,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }\n    }, course.name), React.createElement(Text, {\n      style: CommonStyles.smallText,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }\n    }, course.location), React.createElement(Text, {\n      style: CommonStyles.smallText,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }\n    }, \"Par \", course.par_value, \", \", course.total_yardage, \" Yards\"));\n  })), React.createElement(View, {\n    style: CommonStyles.padding,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 11\n    }\n  }, React.createElement(Text, {\n    style: [CommonStyles.sectionTitle, {\n      paddingTop: w(20)\n    }],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }\n  }, \"Push Notification Will Alert You As Results Post\")), React.createElement(View, {\n    style: styles.padding20,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 11\n    }\n  }, React.createElement(View, {\n    style: styles.row,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }\n  }, React.createElement(LottieView, {\n    ref: animation,\n    autoPlay: true,\n    loop: true,\n    style: {\n      width: w(300),\n      height: h(300)\n    },\n    source: require(\"../assets/lottie/notification.json\"),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 15\n    }\n  }))))), React.createElement(ButtonBack, {\n    title: \"BACK TO RABBIT CARDS\",\n    onPress: function onPress() {\n      return navigation.navigate(\"MyRabbitCards\");\n    },\n    backgroundColor: CommonColors.Green,\n    style: {\n      width: '100%'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }));\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    loading: state.tournaments.loading,\n    error: state.tournaments.error\n  };\n};\n\nexport default connect(mapStateToProps, {\n  getRabbitCardChoice: getRabbitCardChoice\n})(TournamentPushNotification);\nvar styles = StyleSheet.create({\n  padding20: {\n    paddingVertical: w(20)\n  },\n  paddingH40: {\n    paddingHorizontal: w(40),\n    paddingVertical: w(10)\n  },\n  topSection: {\n    paddingTop: w(20)\n  },\n  section: {\n    borderTopWidth: 1,\n    borderBottomWidth: 1,\n    marginBottom: -1,\n    borderColor: CommonColors.Black\n  },\n  row: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: 4\n  },\n  rowSection: {\n    flex: 1,\n    alignItems: 'flex-start'\n  }\n});","map":{"version":3,"sources":["/Users/thinktanker/Downloads/pgaRabbitCard-master/rabbitfront1/Modules/TournamentPushNotification.js"],"names":["React","Component","useEffect","BackButton","Button","ButtonBack","LoadingContainer","Menu","Player","SeparateButton","LottieView","useIsFocused","connect","useDispatch","useSelector","getRabbitCardChoice","getTournamentById","UnderlineIcon","CommonColors","CommonStyles","w","h","TournamentPushNotification","navigation","route","isFocused","card","params","animation","createRef","current","play","dispatch","state","tournaments","fetch","t_id","overflowContainer","loading","container","padding","paddingTop","title","styles","padding20","topSection","subTitle","name","sectionTitle","Date","selectedTournament","start_date","toDateString","end_date","round","paddingHorizontal","tournament","courses","length","map","course","course_number","smallText","location","par_value","total_yardage","row","width","height","require","navigate","Green","mapStateToProps","error","StyleSheet","create","paddingVertical","paddingH40","section","borderTopWidth","borderBottomWidth","marginBottom","borderColor","Black","alignItems","justifyContent","rowSection","flex"],"mappings":"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","sourcesContent":["import React, { Component, useEffect } from 'react';\nimport { StyleSheet, Text, View, SafeAreaView, ScrollView } from 'react-native';\nimport { BackButton, Button, ButtonBack, LoadingContainer, Menu, Player, SeparateButton } from '../components/Button';\nimport LottieView from 'lottie-react-native';\nimport { useIsFocused } from '@react-navigation/native';\nimport { connect, useDispatch, useSelector } from 'react-redux';\nimport { getRabbitCardChoice, getTournamentById } from '../store/redux/tournaments/actions';\nimport { UnderlineIcon } from '../components/icons';\nimport { CommonColors, CommonStyles } from './style';\nimport { w, h } from '../utils/scale';\n\nconst TournamentPushNotification = ({ navigation, route }) => {\n  const isFocused = useIsFocused()\n  const { card } = route.params\n  let animation = React.createRef();\n\n\n  useEffect(() => {\n    animation.current.play()\n  }, [])\n\n  const dispatch = useDispatch()\n  const state = useSelector(state => state.tournaments)\n\n\n  useEffect(() => {\n    isFocused && fetch()\n  }, [card])\n\n  const fetch = () => {\n    dispatch(getTournamentById(card.t_id))\n  }\n\n  return (\n    <View style={CommonStyles.overflowContainer}>\n      <BackButton />\n      {state.tournaments.loading && <LoadingContainer />}\n      <SafeAreaView style={CommonStyles.container}>\n        <ScrollView style={CommonStyles.container}>\n          <View style={[CommonStyles.padding, { paddingTop: w(100) }]}>\n            <Text style={CommonStyles.title}>Tournament Information</Text>\n            <View style={styles.padding20}>\n              <UnderlineIcon />\n            </View>\n            <View style={styles.topSection}>\n              <Text style={CommonStyles.subTitle}>{card?.name || ''}</Text>\n              <Text style={CommonStyles.sectionTitle}>{new Date(state.selectedTournament?.start_date).toDateString() || \"\"} - {new Date(state.selectedTournament?.end_date).toDateString() || \"\"}</Text>\n              <Text style={CommonStyles.sectionTitle}>Round {card?.round || ''}</Text>\n            </View>\n          </View>\n          <View style={{ paddingHorizontal: w(40) }}>\n            <Text style={CommonStyles.sectionTitle}>Courses</Text>\n            {card.tournament?.courses && card.tournament.courses.length !== 0 && card.tournament.courses.map(course => {\n              return <View key={course.course_number} style={{ paddingTop: w(10) }}>\n                <Text style={CommonStyles.smallText}>{course.name}</Text>\n                <Text style={CommonStyles.smallText}>{course.location}</Text>\n                <Text style={CommonStyles.smallText}>Par {course.par_value}, {course.total_yardage} Yards</Text>\n              </View>\n            })}\n          </View>\n          <View style={CommonStyles.padding}>\n            <Text style={[CommonStyles.sectionTitle, { paddingTop: w(20) }]}>Push Notification Will Alert You As Results Post</Text>\n          </View>\n          <View style={styles.padding20}>\n            <View style={styles.row}>\n              <LottieView\n                ref={animation}\n                autoPlay\n                loop={true}\n                style={{\n                  width: w(300),\n                  height: h(300)\n                }}\n                source={require('../assets/lottie/notification.json')}\n              />\n            </View>\n          </View>\n        </ScrollView>\n      </SafeAreaView>\n      <ButtonBack title=\"BACK TO RABBIT CARDS\" onPress={() => navigation.navigate(\"MyRabbitCards\")} backgroundColor={CommonColors.Green} style={{ width: '100%' }} />\n    </View>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  loading: state.tournaments.loading,\n  error: state.tournaments.error,\n});\n\nexport default connect(mapStateToProps, { getRabbitCardChoice })(TournamentPushNotification);\n\nconst styles = StyleSheet.create({\n  padding20: {\n    paddingVertical: w(20),\n  },\n  paddingH40: {\n    paddingHorizontal: w(40),\n    paddingVertical: w(10)\n  },\n  topSection: {\n    paddingTop: w(20)\n  },\n  section: {\n    borderTopWidth: 1,\n    borderBottomWidth: 1,\n    marginBottom: -1,\n    borderColor: CommonColors.Black,\n  },\n  row: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: 4,\n  },\n  rowSection: {\n    flex: 1,\n    alignItems: 'flex-start',\n  }\n});"]},"metadata":{},"sourceType":"module"}