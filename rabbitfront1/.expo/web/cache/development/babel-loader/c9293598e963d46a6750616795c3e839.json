{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/thinktanker/Downloads/pgaRabbitCard-master/rabbitfront1/Modules/MyRabbitCards.js\";\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { Component, useEffect } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport { connect, useDispatch, useSelector } from 'react-redux';\nimport { useIsFocused } from '@react-navigation/native';\nimport { SwipeListView } from 'react-native-swipe-list-view';\nimport { CreateIcon, UnderlineIcon } from \"../components/icons\";\nimport { getAllGolfers } from \"../store/redux/golfers/actions\";\nimport { getAllTournaments, getRabbitCards, deleteRabbitCard } from \"../store/redux/tournaments/actions\";\nimport { LoadingContainer, Menu, PlayButton } from \"../components/Button\";\nimport { w, h } from \"../utils/scale\";\nimport { CommonColors, CommonStyles } from \"./style\";\n\nvar MyRabbitCards = function MyRabbitCards(_ref) {\n  var navigation = _ref.navigation;\n  var isFocused = useIsFocused();\n  var tournaments = useSelector(function (state) {\n    return state.tournaments;\n  });\n  var auth = useSelector(function (state) {\n    return state.auth;\n  });\n  var golfers = useSelector(function (state) {\n    return state.golfers;\n  });\n  var dispatch = useDispatch();\n  useEffect(function () {\n    isFocused && fetch();\n  }, []);\n\n  var fetch = function fetch() {\n    return _regeneratorRuntime.async(function fetch$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            dispatch(getRabbitCards());\n            dispatch(getAllTournaments());\n            dispatch(getAllGolfers());\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var closeRow = function closeRow(rowMap, rowKey) {\n    if (rowMap[rowKey]) {\n      rowMap[rowKey].closeRow();\n    }\n  };\n\n  var deleteRow = function deleteRow(rowMap, rowKey) {\n    closeRow(rowMap, rowKey);\n\n    var newData = _toConsumableArray(tournaments.rabbitCards);\n\n    var prevIndex = tournaments.rabbitCards.findIndex(function (item) {\n      return item.id === rowKey;\n    });\n    dispatch(deleteRabbitCard({\n      id: tournaments.rabbitCards[prevIndex].id\n    }));\n    newData.splice(prevIndex, 1);\n    fetch();\n  };\n\n  var onRowDidOpen = function onRowDidOpen(rowKey) {};\n\n  var _onSwipeValueChange = function onSwipeValueChange(swipeData) {};\n\n  var renderHiddenItem = function renderHiddenItem(data, rowMap) {\n    return React.createElement(View, {\n      style: styles.rowBack,\n      key: \"\" + rowMap,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 7\n      }\n    }, React.createElement(TouchableOpacity, {\n      style: [styles.backRightBtn, styles.backRightBtnRight],\n      onPress: function onPress() {\n        return deleteRow(rowMap, data.item.id);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }\n    }, React.createElement(Text, {\n      style: styles.backTextWhite,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }\n    }, \"Delete\")));\n  };\n\n  var RabbitStatusNavigation = function RabbitStatusNavigation(_ref2) {\n    var item = _ref2.item;\n\n    switch (item.status) {\n      case 'ready':\n        return React.createElement(PlayButton, {\n          onPress: function onPress() {\n            return navigation.navigate('Calc', {\n              card: item\n            });\n          },\n          status: \"ready\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 16\n          }\n        });\n\n      case 'played':\n        return React.createElement(PlayButton, {\n          onPress: function onPress() {\n            return navigation.navigate('SummaryPlayed', {\n              card: item\n            });\n          },\n          status: \"played\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 16\n          }\n        });\n\n      case 'in_progress':\n        return React.createElement(PlayButton, {\n          onPress: function onPress() {\n            return navigation.navigate('SummaryInProgress', {\n              card: item\n            });\n          },\n          status: \"in_progress\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 16\n          }\n        });\n\n      case 'selected':\n        return React.createElement(PlayButton, {\n          onPress: function onPress() {\n            return navigation.navigate('Countdown', {\n              card: item\n            });\n          },\n          status: \"selected\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 16\n          }\n        });\n\n      default:\n        return React.createElement(View, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 16\n          }\n        });\n    }\n  };\n\n  var renderItem = function renderItem(_ref3) {\n    var item = _ref3.item,\n        index = _ref3.index;\n    return React.createElement(View, {\n      style: styles.row,\n      key: \"card-\" + index,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 7\n      }\n    }, React.createElement(View, {\n      style: [styles.left, {\n        width: w(400)\n      }],\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }\n    }, React.createElement(Text, {\n      style: CommonStyles.textInput,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }\n    }, item.tournament.name), React.createElement(Text, {\n      style: CommonStyles.rowTitle,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }\n    }, \"Round \", item.round), React.createElement(Text, {\n      style: CommonStyles.smallText,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }\n    }, new Date(item.tournament.start_date).toDateString() || \"\", \" - \", new Date(item == null ? void 0 : item.tournament.end_date).toDateString() || \"\")), React.createElement(View, {\n      style: styles.right,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }\n    }, React.createElement(RabbitStatusNavigation, {\n      item: item,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }\n    })));\n  };\n\n  return React.createElement(SafeAreaView, {\n    style: CommonStyles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 5\n    }\n  }, React.createElement(Menu, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }\n  }), (tournaments.loading || golfers.loading) && React.createElement(LoadingContainer, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 52\n    }\n  }), React.createElement(ScrollView, {\n    style: CommonStyles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: [CommonStyles.padding, {\n      paddingTop: w(100)\n    }],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    style: CommonStyles.title,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 11\n    }\n  }, \"My Rabbit Cards\"), React.createElement(View, {\n    style: styles.padding20,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 11\n    }\n  }, React.createElement(UnderlineIcon, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }\n  })), React.createElement(Text, {\n    style: CommonStyles.sectionTitle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 11\n    }\n  }, \"CURRENT RABBIT CARDS\"), React.createElement(View, {\n    style: styles.padding20,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 11\n    }\n  }, React.createElement(SwipeListView, {\n    data: tournaments.rabbitCards,\n    renderItem: renderItem,\n    renderHiddenItem: renderHiddenItem,\n    leftOpenValue: w(75),\n    rightOpenValue: -w(120),\n    previewRowKey: '0',\n    previewOpenValue: -40,\n    previewOpenDelay: 3000,\n    onRowDidOpen: onRowDidOpen,\n    keyExtractor: function keyExtractor(item, index) {\n      return item.id;\n    },\n    onSwipeValueChange: function onSwipeValueChange(item) {\n      return _onSwipeValueChange(item);\n    },\n    disableRightSwipe: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }\n  })), React.createElement(TouchableOpacity, {\n    style: styles.createContent,\n    onPress: function onPress() {\n      return navigation.navigate(\"CreateRabbitCards\");\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 11\n    }\n  }, React.createElement(CreateIcon, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }\n  }), React.createElement(Text, {\n    style: [CommonStyles.rowTitle, {\n      paddingLeft: 20\n    }],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }\n  }, \"Create New Rabbit Card\")))));\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    loading: state.tournaments.loading,\n    error: state.tournaments.error\n  };\n};\n\nexport default connect(mapStateToProps, {\n  getAllTournaments: getAllTournaments,\n  getAllGolfers: getAllGolfers,\n  getRabbitCards: getRabbitCards\n})(MyRabbitCards);\nvar styles = StyleSheet.create({\n  padding20: {\n    paddingVertical: w(20)\n  },\n  row: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingVertical: w(20),\n    backgroundColor: CommonColors.White\n  },\n  left: {\n    justifyContent: 'center'\n  },\n  right: {\n    justifyContent: 'center'\n  },\n  createContent: {\n    paddingVertical: w(40),\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  container: {\n    backgroundColor: CommonColors.White,\n    flex: 1\n  },\n  backTextWhite: {\n    color: CommonColors.White\n  },\n  rowFront: {\n    alignItems: 'center',\n    borderBottomColor: 'black',\n    borderBottomWidth: 1,\n    justifyContent: 'center',\n    height: 50\n  },\n  rowBack: {\n    alignItems: 'center',\n    backgroundColor: CommonColors.LightGrey,\n    flex: 1,\n    flexDirection: 'row',\n    justifyContent: 'center',\n    paddingLeft: w(15)\n  },\n  backRightBtn: {\n    alignItems: 'center',\n    bottom: 0,\n    justifyContent: 'center',\n    position: 'absolute',\n    top: 0,\n    width: w(120)\n  },\n  backRightBtnRight: {\n    backgroundColor: 'red',\n    right: 0\n  }\n});","map":{"version":3,"sources":["/Users/thinktanker/Downloads/pgaRabbitCard-master/rabbitfront1/Modules/MyRabbitCards.js"],"names":["React","Component","useEffect","connect","useDispatch","useSelector","useIsFocused","SwipeListView","CreateIcon","UnderlineIcon","getAllGolfers","getAllTournaments","getRabbitCards","deleteRabbitCard","LoadingContainer","Menu","PlayButton","w","h","CommonColors","CommonStyles","MyRabbitCards","navigation","isFocused","tournaments","state","auth","golfers","dispatch","fetch","closeRow","rowMap","rowKey","deleteRow","newData","rabbitCards","prevIndex","findIndex","item","id","splice","onRowDidOpen","onSwipeValueChange","swipeData","renderHiddenItem","data","styles","rowBack","backRightBtn","backRightBtnRight","backTextWhite","RabbitStatusNavigation","status","navigate","card","renderItem","index","row","left","width","textInput","tournament","name","rowTitle","round","smallText","Date","start_date","toDateString","end_date","right","container","loading","padding","paddingTop","title","padding20","sectionTitle","createContent","paddingLeft","mapStateToProps","error","StyleSheet","create","paddingVertical","flexDirection","justifyContent","alignItems","backgroundColor","White","flex","color","rowFront","borderBottomColor","borderBottomWidth","height","LightGrey","bottom","position","top"],"mappings":"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","sourcesContent":["import React, { Component, useEffect } from 'react';\nimport { StyleSheet, Text, View, SafeAreaView, ScrollView, TouchableOpacity, Animated } from 'react-native';\nimport { connect, useDispatch, useSelector } from 'react-redux';\nimport { useIsFocused } from '@react-navigation/native';\nimport { SwipeListView } from 'react-native-swipe-list-view';\nimport { CreateIcon, UnderlineIcon } from '../components/icons';\nimport { getAllGolfers } from '../store/redux/golfers/actions';\nimport { getAllTournaments, getRabbitCards, deleteRabbitCard } from '../store/redux/tournaments/actions';\nimport { LoadingContainer, Menu, PlayButton } from '../components/Button';\nimport { w, h } from '../utils/scale'\nimport { CommonColors, CommonStyles } from './style';\n\nconst MyRabbitCards = ({ navigation }) => {\n  const isFocused = useIsFocused();\n  const tournaments = useSelector((state) => state.tournaments);\n  const auth = useSelector((state) => state.auth);\n  const golfers = useSelector((state) => state.golfers);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    isFocused && fetch()\n  }, [])\n\n  const fetch = async () => {\n    dispatch(getRabbitCards());\n    dispatch(getAllTournaments());\n    dispatch(getAllGolfers());\n  }\n\n  const closeRow = (rowMap, rowKey) => {\n    if (rowMap[rowKey]) {\n      rowMap[rowKey].closeRow();\n    }\n  };\n\n  const deleteRow = (rowMap, rowKey) => {\n    // console.log(rowMap, rowKey, 'row')\n    closeRow(rowMap, rowKey);\n    const newData = [...tournaments.rabbitCards];\n    const prevIndex = tournaments.rabbitCards.findIndex(item => item.id === rowKey);\n    dispatch(deleteRabbitCard({ id: tournaments.rabbitCards[prevIndex].id }))\n    newData.splice(prevIndex, 1);\n    fetch()\n  };\n\n  const onRowDidOpen = rowKey => {\n    // console.log('This row opened', rowKey);\n  };\n\n  const onSwipeValueChange = swipeData => {\n    // const { key, value } = swipeData;\n    // rowSwipeAnimatedValues[key].setValue(Math.abs(value));\n  };\n\n  const renderHiddenItem = (data, rowMap) => {\n    // console.log(data)\n    return (\n      <View style={styles.rowBack} key={`${rowMap}`}>\n        <TouchableOpacity\n          style={[styles.backRightBtn, styles.backRightBtnRight]}\n          onPress={() => deleteRow(rowMap, data.item.id)}\n        >\n          <Text style={styles.backTextWhite}>Delete</Text>\n        </TouchableOpacity>\n      </View>\n    )\n  };\n\n  const RabbitStatusNavigation = ({ item }) => {\n    switch (item.status) {\n      case 'ready':\n        return <PlayButton onPress={() => navigation.navigate('Calc', { card: item })} status=\"ready\" />\n      case 'played':\n        return <PlayButton onPress={() => navigation.navigate('SummaryPlayed', { card: item })} status=\"played\" />\n      case 'in_progress':\n        return <PlayButton onPress={() => navigation.navigate('SummaryInProgress', { card: item })} status=\"in_progress\" />\n      case 'selected':\n        return <PlayButton onPress={() => navigation.navigate('Countdown', { card: item })} status=\"selected\" />\n      default:\n        return <View />\n    }\n  }\n\n  const renderItem = ({ item, index }) => {\n    return (\n      <View style={styles.row} key={`card-${index}`}>\n        <View style={[styles.left, { width: w(400) }]}>\n          <Text style={CommonStyles.textInput}>{item.tournament.name}</Text>\n          <Text style={CommonStyles.rowTitle}>Round {item.round}</Text>\n          <Text style={CommonStyles.smallText}>{new Date(item.tournament.start_date).toDateString() || \"\"} - {new Date(item?.tournament.end_date).toDateString() || \"\"}</Text>\n        </View>\n        <View style={styles.right}>\n          <RabbitStatusNavigation item={item} />\n        </View>\n      </View>\n    )\n  };\n\n  return (\n    <SafeAreaView style={CommonStyles.container}>\n      <Menu />\n      {(tournaments.loading || golfers.loading) && <LoadingContainer />}\n      <ScrollView style={CommonStyles.container}>\n        <View style={[CommonStyles.padding, { paddingTop: w(100) }]}>\n          <Text style={CommonStyles.title}>My Rabbit Cards</Text>\n          <View style={styles.padding20}>\n            <UnderlineIcon />\n          </View>\n          <Text style={CommonStyles.sectionTitle}>CURRENT RABBIT CARDS</Text>\n          <View style={styles.padding20}>\n            <SwipeListView\n              data={tournaments.rabbitCards}\n              renderItem={renderItem}\n              renderHiddenItem={renderHiddenItem}\n              leftOpenValue={w(75)}\n              rightOpenValue={-w(120)}\n              previewRowKey={'0'}\n              previewOpenValue={-40}\n              previewOpenDelay={3000}\n              onRowDidOpen={onRowDidOpen}\n              keyExtractor={(item, index) => item.id}\n              onSwipeValueChange={(item) => onSwipeValueChange(item)}\n              disableRightSwipe={true}\n            />\n          </View>\n          <TouchableOpacity style={styles.createContent} onPress={() => navigation.navigate(\"CreateRabbitCards\")}>\n            <CreateIcon />\n            <Text style={[CommonStyles.rowTitle, { paddingLeft: 20 }]}>Create New Rabbit Card</Text>\n          </TouchableOpacity>\n        </View>\n      </ScrollView >\n    </SafeAreaView >\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  loading: state.tournaments.loading,\n  error: state.tournaments.error,\n});\n\nexport default connect(mapStateToProps, { getAllTournaments, getAllGolfers, getRabbitCards })(MyRabbitCards);\n\nconst styles = StyleSheet.create({\n  padding20: {\n    paddingVertical: w(20),\n  },\n  row: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingVertical: w(20),\n    backgroundColor: CommonColors.White,\n  },\n  left: {\n    justifyContent: 'center'\n  },\n  right: {\n    justifyContent: 'center',\n  },\n  createContent: {\n    paddingVertical: w(40),\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  container: {\n    backgroundColor: CommonColors.White,\n    flex: 1,\n  },\n  backTextWhite: {\n    color: CommonColors.White,\n  },\n  rowFront: {\n    alignItems: 'center',\n    borderBottomColor: 'black',\n    borderBottomWidth: 1,\n    justifyContent: 'center',\n    height: 50,\n  },\n  rowBack: {\n    alignItems: 'center',\n    backgroundColor: CommonColors.LightGrey,\n    flex: 1,\n    flexDirection: 'row',\n    justifyContent: 'center',\n    paddingLeft: w(15),\n  },\n  backRightBtn: {\n    alignItems: 'center',\n    bottom: 0,\n    justifyContent: 'center',\n    position: 'absolute',\n    top: 0,\n    width: w(120),\n  },\n  backRightBtnRight: {\n    backgroundColor: 'red',\n    right: 0,\n  },\n});"]},"metadata":{},"sourceType":"module"}