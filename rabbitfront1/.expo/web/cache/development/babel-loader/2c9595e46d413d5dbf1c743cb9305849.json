{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/thinktanker/Downloads/pgaRabbitCard-master/rabbitfront1/Modules/RabbitCardReadyToPlay.js\";\n\nimport React, { useEffect, useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { useIsFocused } from '@react-navigation/native';\nimport { BackButton, Button, ButtonBack, MakeSelectionButton, Menu, Player, SeparateButton } from \"../components/Button\";\nimport { connect, useDispatch, useSelector } from 'react-redux';\nimport { getRabbitCardChoice, getTournamentById, getGroupingsPar3s } from \"../store/redux/tournaments/actions\";\nimport { UnderlineIcon } from \"../components/icons\";\nimport { CommonColors, CommonStyles } from \"./style\";\nimport { w, h } from \"../utils/scale\";\n\nvar ReadyToPlay = function ReadyToPlay(_ref) {\n  var _card$tournament;\n\n  var navigation = _ref.navigation,\n      route = _ref.route;\n  var card = route.params.card;\n  var isFocused = useIsFocused();\n  var dispatch = useDispatch();\n  var state = useSelector(function (state) {\n    return state.tournaments;\n  });\n\n  var _useState = useState(state.holes),\n      _useState2 = _slicedToArray(_useState, 2),\n      holes = _useState2[0],\n      setHoles = _useState2[1];\n\n  useEffect(function () {\n    setHoles(state.holes);\n  }, [state.holes]);\n  useEffect(function () {\n    isFocused && fetch();\n  }, [card]);\n\n  var fetch = function fetch() {\n    dispatch(getTournamentById(card.t_id));\n    dispatch(getRabbitCardChoice(card));\n    var t_id = card.t_id,\n        round = card.round,\n        group_id = card.group_id;\n    var payload = {\n      t_id: t_id,\n      round: round,\n      group_id: group_id || 1\n    };\n    if (t_id && round) dispatch(getGroupingsPar3s(payload));\n  };\n\n  var makeSelectionNavigation = function makeSelectionNavigation() {\n    if (holes && holes.length !== 0) {\n      navigation.navigate('Pairings', {\n        card: card\n      });\n    } else {\n      Alert.alert(\"There is no holes assigned to this card, please try again later.\");\n    }\n  };\n\n  return React.createElement(View, {\n    style: CommonStyles.overflowContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }\n  }, React.createElement(BackButton, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }), React.createElement(SafeAreaView, {\n    style: CommonStyles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }, React.createElement(ScrollView, {\n    style: CommonStyles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    style: [CommonStyles.padding, {\n      paddingTop: w(100)\n    }],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 11\n    }\n  }, React.createElement(Text, {\n    style: CommonStyles.title,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }\n  }, \"Rabbit Card Summary\"), React.createElement(View, {\n    style: styles.padding20,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }\n  }, React.createElement(UnderlineIcon, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 15\n    }\n  })), React.createElement(View, {\n    style: styles.topSection,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }\n  }, React.createElement(Text, {\n    style: CommonStyles.sectionTitle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 15\n    }\n  }, (card == null ? void 0 : (_card$tournament = card.tournament) == null ? void 0 : _card$tournament.name) || ''), React.createElement(Text, {\n    style: CommonStyles.rowTitle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 15\n    }\n  }, new Date(card.tournament.start_date).toDateString() || \"\", \" - \", new Date(card == null ? void 0 : card.tournament.end_date).toDateString() || \"\"), React.createElement(Text, {\n    style: CommonStyles.rowTitle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 15\n    }\n  }, \"Round \", (card == null ? void 0 : card.round) || ''), React.createElement(MakeSelectionButton, {\n    onPress: function onPress() {\n      return makeSelectionNavigation();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 15\n    }\n  }))), holes && holes.length !== 0 && holes.map(function (item) {\n    return React.createElement(View, {\n      style: styles.section,\n      key: item.id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 31\n      }\n    }, React.createElement(View, {\n      style: styles.paddingH40,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 15\n      }\n    }, React.createElement(View, {\n      style: [styles.row, {\n        alignItems: 'flex-end'\n      }],\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }\n    }, React.createElement(Text, {\n      style: CommonStyles.subTitle,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 19\n      }\n    }, \"HOLE \", item.hole_number), React.createElement(Text, {\n      style: [CommonStyles.sectionTitle, {\n        paddingLeft: 4\n      }],\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 19\n      }\n    }, \"Par \", item.par, \", \", item.yardage, \" Yards\"))));\n  }))), React.createElement(ButtonBack, {\n    title: \"BACK TO MY RABBIT CARDS\",\n    onPress: function onPress() {\n      return navigation.navigate(\"MyRabbitCards\");\n    },\n    backgroundColor: CommonColors.Green,\n    style: {\n      width: '100%'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }));\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    loading: state.tournaments.loading,\n    error: state.tournaments.error\n  };\n};\n\nexport default connect(mapStateToProps, {\n  getGroupingsPar3s: getGroupingsPar3s\n})(ReadyToPlay);\nvar styles = StyleSheet.create({\n  padding20: {\n    paddingVertical: w(20)\n  },\n  paddingH40: {\n    paddingHorizontal: w(40),\n    paddingVertical: w(10)\n  },\n  topSection: {\n    paddingTop: w(20)\n  },\n  section: {\n    borderTopWidth: 1,\n    borderBottomWidth: 1,\n    marginBottom: -1,\n    borderColor: CommonColors.Black\n  },\n  row: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingVertical: 4\n  },\n  rowSection: {\n    flex: 1,\n    alignItems: 'flex-start'\n  }\n});","map":{"version":3,"sources":["/Users/thinktanker/Downloads/pgaRabbitCard-master/rabbitfront1/Modules/RabbitCardReadyToPlay.js"],"names":["React","useEffect","useState","useIsFocused","BackButton","Button","ButtonBack","MakeSelectionButton","Menu","Player","SeparateButton","connect","useDispatch","useSelector","getRabbitCardChoice","getTournamentById","getGroupingsPar3s","UnderlineIcon","CommonColors","CommonStyles","w","h","ReadyToPlay","navigation","route","card","params","isFocused","dispatch","state","tournaments","holes","setHoles","fetch","t_id","round","group_id","payload","makeSelectionNavigation","length","navigate","Alert","alert","overflowContainer","container","padding","paddingTop","title","styles","padding20","topSection","sectionTitle","tournament","name","rowTitle","Date","start_date","toDateString","end_date","map","item","section","id","paddingH40","row","alignItems","subTitle","hole_number","paddingLeft","par","yardage","Green","width","mapStateToProps","loading","error","StyleSheet","create","paddingVertical","paddingHorizontal","borderTopWidth","borderBottomWidth","marginBottom","borderColor","Black","flexDirection","rowSection","flex"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { StyleSheet, Text, View, SafeAreaView, ScrollView, Alert } from 'react-native';\nimport { useIsFocused } from '@react-navigation/native';\nimport { BackButton, Button, ButtonBack, MakeSelectionButton, Menu, Player, SeparateButton } from '../components/Button';\nimport { connect, useDispatch, useSelector } from 'react-redux';\nimport { getRabbitCardChoice, getTournamentById, getGroupingsPar3s } from '../store/redux/tournaments/actions';\nimport { UnderlineIcon } from '../components/icons';\nimport { CommonColors, CommonStyles } from './style';\nimport { w, h } from '../utils/scale';\n\nconst ReadyToPlay = ({ navigation, route }) => {\n  const { card } = route.params\n  const isFocused = useIsFocused()\n\n  const dispatch = useDispatch()\n  const state = useSelector(state => state.tournaments)\n\n  const [holes, setHoles] = useState(state.holes)\n\n  useEffect(() => {\n    setHoles(state.holes)\n  }, [state.holes])\n\n  useEffect(() => {\n    isFocused && fetch()\n  }, [card])\n\n  const fetch = () => {\n    dispatch(getTournamentById(card.t_id))\n    dispatch(getRabbitCardChoice(card))\n    const { t_id, round, group_id } = card\n    const payload = {\n      t_id,\n      round,\n      group_id: group_id || 1\n    }\n    if (t_id && round) dispatch(getGroupingsPar3s(payload))\n  }\n\n  const makeSelectionNavigation = () => {\n    if (holes && holes.length !== 0) {\n      navigation.navigate('Pairings', { card })\n    } else {\n      Alert.alert(\"There is no holes assigned to this card, please try again later.\")\n    }\n  }\n\n  return (\n    <View style={CommonStyles.overflowContainer}>\n      <BackButton />\n      <SafeAreaView style={CommonStyles.container}>\n        <ScrollView style={CommonStyles.container}>\n          <View style={[CommonStyles.padding, { paddingTop: w(100) }]}>\n            <Text style={CommonStyles.title}>Rabbit Card Summary</Text>\n            <View style={styles.padding20}>\n              <UnderlineIcon />\n            </View>\n            <View style={styles.topSection}>\n              <Text style={CommonStyles.sectionTitle}>{card?.tournament?.name || ''}</Text>\n              <Text style={CommonStyles.rowTitle}>{new Date(card.tournament.start_date).toDateString() || \"\"} - {new Date(card?.tournament.end_date).toDateString() || \"\"}</Text>\n              <Text style={CommonStyles.rowTitle}>Round {card?.round || ''}</Text>\n              <MakeSelectionButton onPress={() => makeSelectionNavigation()} />\n            </View>\n          </View>\n          {holes && holes.length !== 0 &&\n            holes.map(item => <View style={styles.section} key={item.id}>\n              <View style={styles.paddingH40}>\n                <View style={[styles.row, { alignItems: 'flex-end' }]}>\n                  <Text style={CommonStyles.subTitle}>HOLE {item.hole_number}</Text>\n                  <Text style={[CommonStyles.sectionTitle, { paddingLeft: 4 }]}>Par {item.par}, {item.yardage} Yards</Text>\n                </View>\n              </View>\n            </View>\n            )}\n        </ScrollView>\n      </SafeAreaView>\n      <ButtonBack title=\"BACK TO MY RABBIT CARDS\" onPress={() => navigation.navigate(\"MyRabbitCards\")} backgroundColor={CommonColors.Green} style={{ width: '100%' }} />\n    </View>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  loading: state.tournaments.loading,\n  error: state.tournaments.error,\n});\n\nexport default connect(mapStateToProps, { getGroupingsPar3s })(ReadyToPlay);\n\nconst styles = StyleSheet.create({\n  padding20: {\n    paddingVertical: w(20),\n  },\n  paddingH40: {\n    paddingHorizontal: w(40),\n    paddingVertical: w(10)\n  },\n  topSection: {\n    paddingTop: w(20)\n  },\n  section: {\n    borderTopWidth: 1,\n    borderBottomWidth: 1,\n    marginBottom: -1,\n    borderColor: CommonColors.Black,\n  },\n  row: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingVertical: 4,\n  },\n  rowSection: {\n    flex: 1,\n    alignItems: 'flex-start',\n  }\n});"]},"metadata":{},"sourceType":"module"}