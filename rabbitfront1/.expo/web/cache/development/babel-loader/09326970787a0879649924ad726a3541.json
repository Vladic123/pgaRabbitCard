{"ast":null,"code":"export var getDisplayNameFromFieldName = function getDisplayNameFromFieldName(name) {\n  switch (name) {\n    case 'new_password1':\n      return 'password';\n\n    case 'new_password2':\n      return 'password';\n\n    case 'last_name':\n      return 'last name';\n\n    default:\n      return name;\n  }\n};\nexport var getServerError = function getServerError(errorObject, errorMessage) {\n  if (errorObject) {\n    try {\n      if (typeof errorObject === 'string') {\n        return errorObject;\n      }\n\n      var fields = Object.keys(errorObject);\n      var messages = [];\n      fields.forEach(function (fieldName) {\n        var message = errorObject[fieldName];\n\n        if (fieldName === 'non_field_errors') {\n          if (typeof message === 'string') {\n            messages.push(\"\" + message);\n          } else if (typeof message === 'object') {\n            var messageContentData = Object.values(message);\n            var messageContent = messageContentData && messageContentData[0];\n            messages.push(\"\" + messageContent);\n          }\n        } else {\n          var displayName = getDisplayNameFromFieldName(fieldName);\n\n          if (typeof message === 'string') {\n            messages.push(!Number.isNaN(Number(displayName)) ? message : message + \" (\" + displayName + \")\");\n          } else if (typeof message === 'object') {\n            var _messageContentData = Object.values(message);\n\n            var _messageContent = _messageContentData && _messageContentData[0];\n\n            messages.push(!Number.isNaN(Number(displayName)) ? _messageContent : _messageContent + \" (\" + displayName + \")\");\n          }\n        }\n      });\n      return messages.join(' ~ ');\n    } catch (e) {\n      console.log('e :>> ', e);\n      return errorMessage;\n    }\n  }\n\n  return null;\n};\nexport var regex = {\n  email: /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/,\n  password: /^(?=.*[\\d])(?=.*[A-Z])(?=.*[a-z])(?=.*[!@#$%^&*])[\\w!@#$%^&*]{8,}$/\n};","map":{"version":3,"sources":["/Users/thinktanker/Downloads/pgaRabbitCard-master/rabbitfront1/utils/helpers.js"],"names":["getDisplayNameFromFieldName","name","getServerError","errorObject","errorMessage","fields","Object","keys","messages","forEach","fieldName","message","push","messageContentData","values","messageContent","displayName","Number","isNaN","join","e","console","log","regex","email","password"],"mappings":"AAAA,OAAO,IAAMA,2BAA2B,GAAG,SAA9BA,2BAA8B,CAACC,IAAD,EAAU;AACnD,UAAQA,IAAR;AACE,SAAK,eAAL;AACE,aAAO,UAAP;;AACF,SAAK,eAAL;AACE,aAAO,UAAP;;AACF,SAAK,WAAL;AACE,aAAO,WAAP;;AACF;AACE,aAAOA,IAAP;AARJ;AAUD,CAXM;AAaP,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,WAAD,EAAcC,YAAd,EAA+B;AAC3D,MAAID,WAAJ,EAAiB;AACf,QAAI;AACF,UAAI,OAAOA,WAAP,KAAuB,QAA3B,EAAqC;AACnC,eAAOA,WAAP;AACD;;AAED,UAAME,MAAM,GAAGC,MAAM,CAACC,IAAP,CAAYJ,WAAZ,CAAf;AACA,UAAMK,QAAQ,GAAG,EAAjB;AAEAH,MAAAA,MAAM,CAACI,OAAP,CAAe,UAACC,SAAD,EAAe;AAC5B,YAAMC,OAAO,GAAGR,WAAW,CAACO,SAAD,CAA3B;;AACA,YAAIA,SAAS,KAAK,kBAAlB,EAAsC;AACpC,cAAI,OAAOC,OAAP,KAAmB,QAAvB,EAAiC;AAC/BH,YAAAA,QAAQ,CAACI,IAAT,MAAiBD,OAAjB;AACD,WAFD,MAEO,IAAI,OAAOA,OAAP,KAAmB,QAAvB,EAAiC;AACtC,gBAAME,kBAAkB,GAAGP,MAAM,CAACQ,MAAP,CAAcH,OAAd,CAA3B;AACA,gBAAMI,cAAc,GAAGF,kBAAkB,IAAIA,kBAAkB,CAAC,CAAD,CAA/D;AAEAL,YAAAA,QAAQ,CAACI,IAAT,MAAiBG,cAAjB;AACD;AACF,SATD,MASO;AACL,cAAMC,WAAW,GAAGhB,2BAA2B,CAACU,SAAD,CAA/C;;AACA,cAAI,OAAOC,OAAP,KAAmB,QAAvB,EAAiC;AAC/BH,YAAAA,QAAQ,CAACI,IAAT,CACE,CAACK,MAAM,CAACC,KAAP,CAAaD,MAAM,CAACD,WAAD,CAAnB,CAAD,GACIL,OADJ,GAEOA,OAFP,UAEmBK,WAFnB,MADF;AAKD,WAND,MAMO,IAAI,OAAOL,OAAP,KAAmB,QAAvB,EAAiC;AACtC,gBAAME,mBAAkB,GAAGP,MAAM,CAACQ,MAAP,CAAcH,OAAd,CAA3B;;AACA,gBAAMI,eAAc,GAAGF,mBAAkB,IAAIA,mBAAkB,CAAC,CAAD,CAA/D;;AAEAL,YAAAA,QAAQ,CAACI,IAAT,CACE,CAACK,MAAM,CAACC,KAAP,CAAaD,MAAM,CAACD,WAAD,CAAnB,CAAD,GACID,eADJ,GAEOA,eAFP,UAE0BC,WAF1B,MADF;AAKD;AACF;AACF,OA9BD;AAgCA,aAAOR,QAAQ,CAACW,IAAT,CAAc,KAAd,CAAP;AACD,KAzCD,CAyCE,OAAOC,CAAP,EAAU;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBF,CAAtB;AACA,aAAOhB,YAAP;AACD;AACF;;AAED,SAAO,IAAP;AACD,CAlDM;AAoDP,OAAO,IAAMmB,KAAK,GAAG;AACnBC,EAAAA,KAAK,EAAE,+CADY;AAEnBC,EAAAA,QAAQ,EAAE;AAFS,CAAd","sourcesContent":["export const getDisplayNameFromFieldName = (name) => {\n  switch (name) {\n    case 'new_password1':\n      return 'password';\n    case 'new_password2':\n      return 'password';\n    case 'last_name':\n      return 'last name';\n    default:\n      return name;\n  }\n};\n\nexport const getServerError = (errorObject, errorMessage) => {\n  if (errorObject) {\n    try {\n      if (typeof errorObject === 'string') {\n        return errorObject;\n      }\n\n      const fields = Object.keys(errorObject);\n      const messages = [];\n\n      fields.forEach((fieldName) => {\n        const message = errorObject[fieldName];\n        if (fieldName === 'non_field_errors') {\n          if (typeof message === 'string') {\n            messages.push(`${message}`);\n          } else if (typeof message === 'object') {\n            const messageContentData = Object.values(message);\n            const messageContent = messageContentData && messageContentData[0];\n\n            messages.push(`${messageContent}`);\n          }\n        } else {\n          const displayName = getDisplayNameFromFieldName(fieldName);\n          if (typeof message === 'string') {\n            messages.push(\n              !Number.isNaN(Number(displayName))\n                ? message\n                : `${message} (${displayName})`,\n            );\n          } else if (typeof message === 'object') {\n            const messageContentData = Object.values(message);\n            const messageContent = messageContentData && messageContentData[0];\n\n            messages.push(\n              !Number.isNaN(Number(displayName))\n                ? messageContent\n                : `${messageContent} (${displayName})`,\n            );\n          }\n        }\n      });\n\n      return messages.join(' ~ ');\n    } catch (e) {\n      console.log('e :>> ', e);\n      return errorMessage;\n    }\n  }\n\n  return null;\n};\n\nexport const regex = {\n  email: /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/,\n  password: /^(?=.*[\\d])(?=.*[A-Z])(?=.*[a-z])(?=.*[!@#$%^&*])[\\w!@#$%^&*]{8,}$/\n}\n"]},"metadata":{},"sourceType":"module"}